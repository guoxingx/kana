#include "charutils.h"

#include <QString>


unsigned char const auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

unsigned char const auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};


// 校验和
// len表示作为累加的bytes数，计算完后会在arr[len]直接写入校验和
char checksum(char arr[], int len) {
    int sum = 0;
    for(int i = 0; i < len; ++i) {
       sum += int(arr[i]);
    }
    sum = sum % 256;
    arr[len] = sum;
//    arr[len] = *((char *)(&sum) + 0);
    return sum;
}

// 将 num 写入 arr 的后续 len 个 bytes
void int2char(char arr[], int num, int len) {
    for (int i = 0; i < len; ++i)
        arr[len - 1 - i] = *((char *)(&num) + i);
}

// 将 arr 后续的 4 个 bytes 转为 int32 并返回
int32_t char2int32(char arr[]) {
    uchar a = arr[0];
    uchar b = arr[1];
    uchar c = arr[2];
    uchar d = arr[3];
    int32_t num = int32_t(a << 24 | b << 16 | c << 8 | d);
    return num;

//    int num = *(int32_t *)(&arr);

    // 小端转大端
//    return (num & 0xff) << 24 | (num & 0xff00) << 8 | (num & 0xff0000) >> 8 | (num >> 24) & 0xff;
}

// 将 arr 后续的 2 个 bytes 转为 int16 并返回
uint16_t char2uint16(char arr[]) {
    uchar a = arr[0];
    uchar b = arr[1];
    uint16_t num = uint16_t(a << 8 | b);
    return num;
}

// 将 arr 转化为 QString
QString uchar2str(const unsigned char *arr, int len) {
    QString fuckcpp;
    for (int i = 0; i < len; ++i) {
        if (arr[i] < 0x10)
            fuckcpp += QString("0%1").arg(arr[i], 0, 16);
        else
            fuckcpp += QString("%1").arg(arr[i], 0 ,16);
    }
    return fuckcpp;
}

QString QByteArray2hex(QByteArray buf) {
    QString hex;
    for (int i = 0; i < buf.size(); ++i) {
        if (uchar(buf.at(i)) < 0x10)
            hex += QString("0%1").arg(uchar(buf.at(i)), 0, 16);
        else
            hex += QString("%1").arg(uchar(buf.at(i)), 0 ,16);
    }
    return hex;
}

// C89标准规定，short和char会被自动提升为int（整形化，类似地，float也会自动提升为double）
// 这样做是为了便于编译器进行优化，使变量的长度尽可能一样，尽可能提升所产生代码的效率
// char的值当它是正数的时候也同样进行了符号扩展的，只不过正数是前面加0，用%02x打印的时候那些0被忽略；
// 而补码表示的负数的符号扩展却是前面加1，用%02x打印的时候那些1不能被忽略，因此才按照本来的长度输出来。
// 如没有添加unsigned，则当char>0x7F时（如0X80），格式转换为FFFFFF80！
// 解决办法：在char 前面加上 unsigned.
QString char2str(const char *arr, int len) {
    QString fuckcpp;
    for (int i = 0; i < len; ++i) {
        if (uchar(arr[i]) < 0x10)
            fuckcpp += QString("0%1").arg(uchar(arr[i]), 0, 16);
        else
            fuckcpp += QString("%1").arg(uchar(arr[i]), 0 ,16);
    }
    return fuckcpp;
}

unsigned short calculateCRC(const unsigned char *data, int len) {
    unsigned char  uchCRCHi = 0xFF;
    unsigned char  uchCRCLo = 0xFF;
    unsigned short uIndex;

    if(len == 0)
        return(0xffff);

    while (len--) {
        uIndex 	= uchCRCHi ^ *data++;
        uchCRCHi= uchCRCLo ^ auchCRCHi[uIndex];
        uchCRCLo= auchCRCLo[uIndex];
    }
    return((uchCRCHi << 8) | uchCRCLo);
}


